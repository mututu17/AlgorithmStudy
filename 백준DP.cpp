#include <iostream> 
#include <string.h> 
using namespace std;

int main()
{
	// 1463 
    /*  1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
        2. X가 2로 나누어 떨어지면, 2로 나눈다.
        3. 1을 뺀다.
        정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.
     */
    int x;
    int count = 0;
    cin >> x;
    
    while (1) {    // 틀림 ㅠ.. 왜지 ?? 
        if (x % 3 == 0) {
            x /= 3; 
            count++;
        }
        else if (x % 2 == 0 && x != 10) {  // 뭔가 규칙성이 10에서만 발생하는 것 같다고 생각해서 10제외
            x /= 2;
            count++;
        }         
        else {
            x -= 1;     // 둘다 안 나눠지면 -1
            count++;
        }
        if ((x - 1) == 10)  // 10일 때 -1 을해서 9에서 나눠나가 1까지 3번의 횟수가 되도록 함
        {              
            x -= 1;
            count++;
        }
        if (x == 1) {  // 1이되면 종료
            break;
        }
    }
    cout << count << endl;

	// 배열 타일 채우기 
    /*
    어떤 꼬마가 벽에 3×3 사각형 2개를 그렸다. 부모는 꼬마가 칠한 타일을 수리하여야 한다.
    벽의 크기는 10×10이다. 사각형은 서로 겹칠 수 있다. 
    꼬마가 그린 사각형 2개의 시작 좌표를 입력 받아, 수리해야 되는 타일의 개수를 계산하는 프로그램을 작성하라.
    */
    int a, b;
    int area = 0;
    int wall[10][10] = { 0 }; // 0으로 초기화

    for (int i = 0; i < 2; i++) {
        cout<< i<<" 번째 사각형: 시작 좌표 ";
        cin>>a>>b;
        for (int j = a; j < a + 3; j++) {
            for (int k = b; k < b + 3; k++) {
                wall[j][k] = 1;               // 해당 영역이 칠해짐
            }
        }
    }
    for (int i = 0; i <= 10; i++) {
        for (int j = 0; j <= 10; j++) {
            if (wall[i][j] == 1) {
                area++;                          // 칠해진 영역이면 넓이를 증가시킴
            } 
        }
    }

    cout << "수리해야 하는 타일의 수 : " << area << endl;

	// 9095
    /*
    123  더하기
    정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.
    */

    int T;
    cin >> T;

    int dp[11];
    int i, j,n;
    dp[0] = 1;      // * n= 1 ,2 3 일 때 경우의 수를 그냥 배열에 미리 선언해 놓아야 함.,, 이걸 어떻게 알아 ...
    dp[1] = 2;
    dp[2] = 4;

    for (i = 0; i < T; i++) {
        cin>>n;
        for (j = 3; j < n; j++) { // n = 4 일 때 부터 시작 
            dp[j] = dp[j - 3] + dp[j - 2] + dp[j - 1]; // ex) 4 = 1(0) + 2(1) + 3(2) 의 경우의 수 (앞에 저장한 값을 더함)
        }
        cout << dp[n - 1] << endl;  //  ex) n = 4 일때  즉, n(3)까지의 경우의 수를 더한 값 출력 = 7
    }

    // [출처] 백준 알고리즘 9095번 문제풀이 | 작성자 jhh0712
 

	return 0;
}